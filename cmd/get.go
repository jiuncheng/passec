/*
Copyright Â© 2021 WONG JIUN CHENG <lolz1999@hotmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package cmd

import (
	"crypto/aes"
	"crypto/cipher"
	"crypto/sha512"
	"encoding/hex"
	"fmt"
	"os"
	"strings"

	"github.com/jiuncheng/passec/tools"
	"github.com/spf13/cobra"
	"golang.org/x/crypto/pbkdf2"
)

// getCmd represents the get command
var getCmd = &cobra.Command{
	Use:     "get",
	Aliases: strings.Fields("decrypt"),
	Short:   "Decrypt password with key",
	RunE: func(cmd *cobra.Command, args []string) error {
		file, err := cmd.Flags().GetString("file")
		if err != nil {
			return err
		}
		cryptData, err := cmd.Flags().GetString("cryptdata")
		if err != nil {
			return err
		}
		if file == "" && cryptData == "" {
			fmt.Println("Must at least specify -d or -F")
			return nil
		} else if file != "" && cryptData != "" {
			fmt.Println("Only one of -d or -F can be specified.")
			return nil
		}

		keyPass, err := cmd.Flags().GetString("key")
		if err != nil {
			return err
		}
		if keyPass == "" {
			fmt.Println("The key cannot be empty.")
			return nil
		}

		var encryptedData string
		if file != "" {
			f, err := os.ReadFile(file)
			if err != nil {
				return err
			}
			newPassec, err := tools.NewPassecFromJson(string(f))
			if err != nil {
				return err
			}
			encryptedData = newPassec.CryptData
		} else {
			encryptedData = cryptData
		}

		password, err := decrypt(keyPass, encryptedData)
		if err != nil {
			return err
		}

		fmt.Printf("The decrypted password is : %s", password)
		return nil
	},
}

func init() {
	rootCmd.AddCommand(getCmd)
	getCmd.Flags().StringP("key", "k", "", "The secure key used to decrypt the password")
	getCmd.Flags().StringP("cryptdata", "d", "", "The encrypted data generated by setter")
	getCmd.Flags().StringP("file", "F", "", "The file for the decryption")
}

func decrypt(keyPass string, encryptedString string) (string, error) {
	dk := pbkdf2.Key([]byte(keyPass), []byte(salt), 4096, 32, sha512.New)

	key := dk
	enc, err := hex.DecodeString(encryptedString)
	if err != nil {
		return "", err
	}

	block, err := aes.NewCipher(key)
	if err != nil {
		return "", err
	}

	gcm, err := cipher.NewGCM(block)
	if err != nil {
		return "", err
	}

	//Get the nonce size
	nonceSize := gcm.NonceSize()

	//Extract the nonce from the encrypted data
	nonce, ciphertext := enc[:nonceSize], enc[nonceSize:]

	//Decrypt the data
	plaintext, err := gcm.Open(nil, nonce, ciphertext, nil)
	if err != nil {
		fmt.Println("asdasd")
		return "", err
	}

	return string(plaintext), nil
}
